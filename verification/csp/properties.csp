-- root: curiosity.csp
-- properties.csp

-- Checks that if a client sends a goal, then it will begin execution on the right server
SendThenExecute =
  send_goal_arm?_ -> executeGoal.arm -> SKIP
  |||
  send_goal_mast?_ -> executeGoal.mast -> SKIP
  |||
  send_goal_wheels?_ -> executeGoal.wheels -> SKIP

assert SendThenExecute [T= Curiosity\(diff(Events, {|send_goal_arm, send_goal_mast, send_goal_wheels, executeGoal |}) )
-- Traces, becasue otherwise it fails because of the data

-- Checks that if a client sends a goal, eventually it gets a result
SendThenResult =
  send_goal_arm?_ -> get_result.arm?_ -> SKIP
  |||
  send_goal_mast?_ -> get_result.mast?_ -> SKIP
  |||
  send_goal_wheels?_ -> get_result.wheels?_ -> SKIP

assert SendThenResult [T= Curiosity\(diff(Events, {|send_goal_arm, send_goal_mast, send_goal_wheels, get_result |}) )
-- Traces, becasue otherwise it fails because of the data

-- These assertions check that when the agent tells a hardware node to perform an action, and once the hardware node has told the agent it's ready,
-- it can accept an action, then eventually sends the result of the action
AgentThenResult_Arm =

(gwendolen_curiosity_arm?goal -> start_actions.arm -> arm_curiosity_to_agent_nodeResult.goal -> SKIP
[| {|start_actions.arm  |} |]
curiosity_to_agent_nodeName.arm -> start_actions.arm -> SKIP)

assert AgentThenResult_Arm [T= Curiosity\(diff(Events, {|curiosity_to_agent_nodeName.arm, gwendolen_curiosity_arm, arm_curiosity_to_agent_nodeResult, start_actions.arm |}) )
-- Traces, becasue otherwise it fails because of the data

AgentThenResult_Mast =

(gwendolen_curiosity_mast?goal -> start_actions.mast -> mast_curiosity_to_agent_nodeResult.goal -> SKIP
[| {|start_actions.mast  |} |]
curiosity_to_agent_nodeName.mast -> start_actions.mast -> SKIP)

assert AgentThenResult_Mast [T= Curiosity\(diff(Events, {|curiosity_to_agent_nodeName.mast, gwendolen_curiosity_mast, mast_curiosity_to_agent_nodeResult, start_actions.mast |}) )
-- Traces, becasue otherwise it fails because of the data

AgentThenResult_Wheels =

(gwendolen_curiosity_wheels?goal -> start_actions.wheels -> SKIP
[| {|start_actions.wheels  |} |]
curiosity_to_agent_nodeName.wheels ->  start_actions.wheels -> wheels_curiosity_to_agent_nodeResult -> SKIP)

assert AgentThenResult_Wheels [T= Curiosity\(diff(Events, {|curiosity_to_agent_nodeName.wheels, gwendolen_curiosity_wheels, wheels_curiosity_to_agent_nodeResult, start_actions.wheels |}) )
-- Traces, becasue otherwise it fails because of the data
